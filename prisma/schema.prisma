// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  MEMBER
  ADMIN
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@index([userId])

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@index([userId])
// }

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(MEMBER)
  active        Boolean   @default(false)
  videos        Video[]
  verifyToken   String?
  // accounts      Account[]
  // sessions      Session[]
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String? @db.Text
  videos      Video[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model User {
//   id     String  @id @default(uuid())
//   email  String  @unique
//   name   String?
//   role   Role    @default(USER)
//   videos Video[]
// }

model Video {
  id          String   @unique
  title       String
  video       String
  poster      String
  description String?  @db.Text
  uploadDate  DateTime @default(now())
  userId      String
  categoryId  String
  user        User     @relation(fields: [userId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  // views       VideoView[]
  // comments    Comment[]
  // likes       Like[]

  @@index([userId])
  @@index([categoryId])
}
